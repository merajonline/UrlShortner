
@Service
public class UrlService {

 

    private UrlEntity get(Long id) {
        //Fetching Url from database
        UrlEntity urlEntity = urlRepository.findById(id).get();
        return urlEntity;
    }

    //Uses the Base62 encoded to convert to Base10 number and fetches the corresponding record from the database
    //@param shortenString Base62 encoded string
    //@return FullUrl object
    public FullUrl getFullUrl(String shortenString) {
        Long id = ShorteningUtil.strToId(shortenString);
        return new FullUrl(this.get(id).getFullUrl());
    }

    private UrlEntity save(FullUrl fullUrl) {
        return urlRepository.save(new UrlEntity(fullUrl.getFullUrl()));
    }


    //It saves the full url to database and uses the autogenerated id to convert to Base62 string
    //@param fullUrl FullUrl object to be converted to shortened url
    //@return ShortUrl object
    public ShortUrl getShortUrl(FullUrl fullUrl) {

        //Checking if the url already exists
        List<UrlEntity> savedUrls = null;
        savedUrls = checkFullUrlAlreadyExists(fullUrl);

        UrlEntity savedUrl = null;

        if (savedUrls.isEmpty()) {
            savedUrl = save(fullUrl);
        }else {
            savedUrl = savedUrls.get(0);
            //url: savedUrl already exists in the database, skipped insert
        }

        //Converting Base 10  to Base 62 string
        String shortUrlText = ShorteningUtil.idToStr(savedUrl.getId());

        return new ShortUrl(shortUrlText);
    }

     //Check if Url already exists in the database to prevent having same url stored multiple times
    //@param fullUrl
    //@return list of UrlEntity objects, list will be empty if no results found
    private List<UrlEntity> checkFullUrlAlreadyExists(FullUrl fullUrl) {
        return urlRepository.findUrlByFullUrl(fullUrl.getFullUrl());
    }
}